use crate::utils::arrayX::ArrayX;
use crate::BigNum;
use crate::BigNumParamsTrait;
use crate::bignum_test::{
    test_mul, test_add, test_div, test_invmod, assert_is_not_equal, assert_is_not_equal_fail,
    assert_is_not_equal_overloaded_lhs_fail, assert_is_not_equal_overloaded_rhs_fail,
    assert_is_not_equal_overloaded_fail
};
use crate::mul::{schoolbook_mult, karatsuba_mult_9};

struct Test250NonPrimeParams {}

impl BigNumParamsTrait<9> for Test250NonPrimeParams {
  fn modulus() -> [Field; 9] {
    [1247413701610518289056835958718466896, 1212068582076288490557887958472450820, 309827591813783368056386273526745089, 103271957163449901667302356038089968, 1309392953667360630014747732299127122, 735993241018902944004934683710518547, 184783984939505022642273550543608117, 446913076587726683543985627868997184, 1145425372318550949168605011625951]
  }

  fn double_modulus() -> [Field; 9] {
    [1165599407436120705209864857156589216, 1094909168367661108211968856664557065, 619655183627566736112772547053490179, 206543914326899803334604712076179936, 1289557911549805387125688404317909668, 142758486252890015106062307140692519, 369567969879010045284547101087216235, 893826153175453367087971255737994368, 2290850744637101898337210023251902]
  }

  fn redc_param() -> [Field; 9] {
    // floor(2^(2*950) / p
    [56289327603706573632841778488160958, 724848756498620717892481942772790676, 132302446997607800173654061996757318, 602955131184847535633702309260910860, 665654864520915565717325544388495747, 833652801536218262409147981148440581, 79073746244295905824388321095439419, 1050120411427947755911727339364744282, 1471066302020333997253346401219778]
  }

  fn modulus_bits() -> u64 {
    1070 
  }

  fn mult(a: [Field; 9], b: [Field; 9]) -> ArrayX<Field, 9, 2> {
    karatsuba_mult_9(a, b)
  }
}
