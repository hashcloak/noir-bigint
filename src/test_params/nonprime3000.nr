use crate::utils::arrayX::ArrayX;
use crate::BigNum;
use crate::BigNumParamsTrait;
use crate::bignum_test::{
    test_mul, test_add, test_div, test_invmod, assert_is_not_equal, assert_is_not_equal_fail,
    assert_is_not_equal_overloaded_lhs_fail, assert_is_not_equal_overloaded_rhs_fail,
    assert_is_not_equal_overloaded_fail
};
use crate::mul::schoolbook_mult;

struct Test3000NonPrimeParams {}

impl BigNumParamsTrait<26> for Test3000NonPrimeParams {
  // p = 723500603748828982226749848064678293860937966589623949192239071886521464980100734840118435910018739245261220019487470297847534288224399488255565906728000478526106854341800498461961741965422200569937784974438101410021380783354196590588293605374958528467202764416163380105749567874904398156403523945022682424058452711494604829900573448971731131648247408348489447843963292087374604900879220220306834919535294504701871086250260518777557283424029943177167772807904075323450869543561450278007468398836228501198022475352090172519638942981005307538013068037323187687424165385977102464048637253754611741309495454400849933014535366949346912854935586573714115258039541024293612403722298208099166710739137223946078077522011328909815680518746497914093926268665777824324561773708578565010405488518106472927294658974895825706565586760937590083016843980171684327226570792911911473626395534602062858706480839040166236420
  fn modulus() -> [Field; 26] {
    [57241433361639879178960935959630084, 1109770084199332247697551432497028816, 1268467940147094137174485351081809092, 180456989518735154441472249173533459, 610004853696252960850749584103577672, 268468979401450026458382681523280373, 791127184351170251301902630036135189, 69152502624096035525285889501637663, 723290013182782607386158617871818995, 578621447927627677212778282269676663, 1256434798225405323323754287197075506, 790012424409114812542595855936888192, 1064430790395994953894009646035435363, 717225208657267614739195024297597632, 988310181824749868191377155024429964, 65133883441360636620531419468224926, 129957059857905028156593937157665297, 578608649932817509102123632595350387, 324151983030576298859569211694416977, 790794840854868343139131157425483838, 903421493516850337677976066502814063, 931258122846046715045461425029921707, 75659661547325722531186377109935075, 356760367581058246952635259679931438, 781720292041230233153794021740875199, 0]
  }

  // Note the most significant limb is 121 bits
  fn double_modulus() -> [Field; 26] {
    [114482866723279758357921871919260168, 890312172613748622491295804713713056, 1207707884509272401445163641883273609, 360913979037470308882944498347066919, 1220009707392505921701499168207155344, 536937958802900052916765363046560746, 253026372917424629699998199791925802, 138305005248192071050571779003275327, 117352030580649341868510175463293414, 1157242895855255354425556564539353327, 1183641600665894773743701514113806436, 250796853033313752181384651593431809, 799633585007074034884212231790526151, 105222421529619356574582988314850689, 647392367864583863478947249768515353, 130267766882721273241062838936449853, 259914119715810056313187874315330594, 1157217299865635018204247265190700774, 648303966061152597719138423388833954, 252361685924820813374455254570623100, 477614991248784802452145072725283551, 533288249907177557187115789779498839, 151319323094651445062372754219870151, 713520735162116493905270519359862876, 234212588297544593403780983201405822, 1]
  }

  // Note the most significant limb is 121 bits
  fn redc_param() -> [Field; 26] {
    // floor(2^(2*3000) / p)
    // 2091871899570182897289903344281903981376425582466550896957251623631901583386191273154292524963616740748866532319944406893998408459893299286827180197632885685942701830346960485127139299287398987185953776075670191170297149863641830126297081814816520335259884627358362949845347729416441253969322547922368114825612738751489796397028557730925188812915982999411956009056059817101199693192199061480203668458036592490068364717597134671942012493878603738563069622182947364678993317498220220598412216507320680202775317429836718696425613209243856520326758969235685309537012137211815518832497157658154312530756154270115035967737585736360656103490450500193109917694538805221540019806533813399663269782922914989899581352799633578374032745744797077046071317968866389804411314669782182962292016591877839456623325139240366766597713349832452813156731751050306325746055299587411133613639247644611734496196354927602883850937
    [627174913354822253122455183775724217, 250184995109895532483988606813585127, 1020959125186958797544276085614301736, 468894718931827400088589331958218736, 193517111313816665254222495299811365, 431465629177758646497638120661897339, 495966691122525627620765646153849242, 82653005121403393838403619519910755, 917464749123410999037398585253759908, 139902359461490990561904617560580796, 237508676949482147801744990129071465, 773151999873770299281957874719974080, 388734875563456978995303334170627449, 1270334162879044907844900117650226363, 1068911547483600142520968270463588321, 259705000645439225699776073646946613, 321277228229919785650845853224542655, 654507900308317133441000524687317301, 557424201374070939989653353063656636, 225065109570842021501530330848472382, 470458152325633778549925670514562494, 572727027070040220494545749452178233, 1006204495814275415904167009719263709, 1128422458648992013134302748023261497, 930975663716858459605116566780796817, 1]
  }

  fn modulus_bits() -> u64 {
    3000
  }

  // TODO pick most efficient option
  fn mult(a: [Field; 26], b: [Field; 26]) -> ArrayX<Field, 26, 2> {
    // schoolbook_mult(a,b)
    schoolbook_mult(a,b)
  }
}

#[test]
fn test_mul_3000_nonprime() {
    let stub: BigNum<26, Test3000NonPrimeParams> = BigNum::new();
    test_mul(stub);
}

#[test]
fn test_add_3000_nonprime() {
    let stub: BigNum<26, Test3000NonPrimeParams> = BigNum::new();
    test_add(stub);
}

// Fail because nonprime
// #[test]
// fn test_div_3000_nonprime() {
//     let stub: BigNum<26, Test3000NonPrimeParams> = BigNum::new();
//     test_div(stub);
// }

// #[test]
// fn test_invmod_3000_nonprime() {
//     let stub: BigNum<26, Test3000NonPrimeParams> = BigNum::new();
//     test_invmod(stub);
// }

#[test]
fn test_assert_is_not_equal_3000_nonprime() {
    let stub: BigNum<26, Test3000NonPrimeParams> = BigNum::new();
    assert_is_not_equal(stub);
}

#[test(should_fail_with = "asssert_is_not_equal fail")]
fn test_assert_is_not_equal_fail_3000_nonprime() {
    let stub: BigNum<26, Test3000NonPrimeParams> = BigNum::new();
    assert_is_not_equal_fail(stub);
}

#[test(should_fail_with = "asssert_is_not_equal fail")]
fn test_assert_is_not_equal_overloaded_lhs_fail_3000_nonprime() {
    let stub: BigNum<26, Test3000NonPrimeParams> = BigNum::new();
    assert_is_not_equal_overloaded_lhs_fail(stub);
}

#[test(should_fail_with = "asssert_is_not_equal fail")]
fn test_assert_is_not_equal_overloaded_rhs_fail_3000_nonprime() {
    let stub: BigNum<26, Test3000NonPrimeParams> = BigNum::new();
    assert_is_not_equal_overloaded_rhs_fail(stub);
}

#[test(should_fail_with = "asssert_is_not_equal fail")]
fn test_assert_is_not_equal_overloaded_fail_3000_nonprime() {
    let stub: BigNum<26, Test3000NonPrimeParams> = BigNum::new();
    assert_is_not_equal_overloaded_fail(stub);
}
