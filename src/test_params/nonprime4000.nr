use crate::utils::arrayX::ArrayX;
use crate::BigNum;
use crate::BigNumParamsTrait;
use crate::bignum_test::{
    test_mul, test_add, test_div, test_invmod, assert_is_not_equal, assert_is_not_equal_fail,
    assert_is_not_equal_overloaded_lhs_fail, assert_is_not_equal_overloaded_rhs_fail,
    assert_is_not_equal_overloaded_fail
};
use crate::mul::{karatsuba_mult_34, schoolbook_mult};

struct Test4000NonPrimeParams {}

impl BigNumParamsTrait<34> for Test4000NonPrimeParams {
  // p = 11905185719809113347952304627537229084495012322334761421263362941819005076272653171819652535900723822453931841533798587211660529425186705480693938287614829433932716994198609849979171164457172853306252735107612490830505584488723575963431935507724472853689896754233773945542813840569747121978475559547508905954628563277784980997247182777985861254790485638113956461701344387541415790346777807903103651040519954878730112578505167632153297737098658558195670325852592865417754342478918773155156750992914759931576791947998309621643604421997392973728505275270582250866421451491941655345499480183356052204573324540013598042106668023084440499633610274655656921576050370772117204012504341359775129691748814870717847508851430429596945087645966293559732065552246423227019583315698074750289133386686472255901063738174275559357381938127010254419545058483145096098602300305707274713544185022308569013775784402592838514173554708541893483899264245867197036986983329023546940300197625318710966273829109248164018685374491470854711792763019304328203809379069790480338817062112642268550012239564999591245505853329628507313790080351594447507896716892287004224355122406638042209493375064023151055338834596214565798631597772944705
  fn modulus() -> [Field; 34] {
    [54171808297219181788655875203577153, 364147697244477883981224632788685376, 1275357197298583501665318355216509363, 606275382923030057404391452551456339, 978532545815651379402929768566839269, 210396438660751020690415837324151956, 501809804323247096410525293479497251, 122716846492947949643113016709801759, 143605942933088533536541961377266256, 579048834860127008961339827075071892, 828905942334653889292802383388362945, 1138182624321236114684595740495280448, 541171868028995333934496466419149684, 154672730252193620985210640836696719, 667101561518904182819045269091820920, 712120942945530557088251587011770364, 761929022827684939556749522952064369, 617438287505981276317361489965464224, 686502976223735012075552359915804145, 965042404229265540337369186289451661, 865274026535630834001802050043598990, 612714674350873133669712301392813339, 47930057291296498242807058034803615, 1199460747948075518000979498563339299, 494828151263336133774047361465598136, 1033653377488383170703843235989499819, 935850265281900056734175100614322372, 1063869050147284581395890453583296054, 411230305232853629452699370392126870, 547066502411279045375449640004058899, 1253696872995269805249336405270752694, 250409846861183826563444831126558444, 295627042152985002160492389679221990, 993009367441]
  }

  fn double_modulus() -> [Field; 34] {
    [108343616594438363577311750407154306, 728295394488955767962449265577370752, 1221486398812251130426829650152674150, 1212550765846060114808782905102912679, 627837095846386885902052476853333962, 420792877321502041380831674648303913, 1003619608646494192821050586958994502, 245433692985895899286226033419603518, 287211885866177067073083922754532512, 1158097669720254017922679654150143784, 328583888884391905681797706496381314, 947137252857556356465384420710216321, 1082343736057990667868992932838299369, 309345460504387241970421281673393438, 4975127252892492734283477903297264, 95013890106145241272696113743196153, 194630049870454006209691985623784163, 1234876575011962552634722979930928449, 43777956662554151247297659551263714, 600856812673615207770931312298558747, 401320057286345795099797039806853405, 1225429348701746267339424602785626679, 95860114582592996485614116069607230, 1069693500111235163098151936846334022, 989656302526672267548094722931196273, 738078759191850468503879411698655062, 542472534778884240564543140948300169, 798510104509653289887973846886247533, 822460610465707258905398740784253741, 1094133004822558090750899280008117798, 1178165750205623737594865750261160812, 500819693722367653126889662253116889, 591254084305970004320984779358443980, 1986018734882]
  }

  fn redc_param() -> [Field; 34] {
    // floor(2^(2*4000) / p)
    // 14595841449552423102233342478948942973235126050618307487257250719001622357082722712956074210035717155450394420795859555865555458670741374389289797941173421054599018496170464838929370931856914621153153013584717362819137628367470946389717541578141966796807889427329124774803105012898191815207275471936156783729952107453739418138607760957487398631635990517274803393479470988741556411425767583880198406411559491682243968006276066527575499521889597470301557738893268821989293945958430850910623084653079858860028854294053156366426889974961583899148280906860977890969945450313954575498947299553281847924405900791662757475206024586330672751249969485329843420759508529098767076954137732171735287583140632860231660200463812090279585784810177228832750497974781418898663275145590206761372329868262821896698848900093055979700086851094172520873271364412324378252582418226623054076862363587021120056108026139993408442740940141037585701948208280141906730570918665012228037680710015187894354633144602555653294663768534104621584177719752678114761611040184260054896408784416508531704729074125933713108047868488177146861332995918439849079166370777084972005833301058900087085784718832395224331424146696066420744206000885636803
    [1258355987611764436078348914897493699, 641447469483388932405783066149529793, 935276145231335796033538055449645789, 1305149712118904162709426772650199017, 1242111998140384687856724629844414846, 296887890586414732036441181181287391, 890398021139196637509223804678838567, 511909559589370336640279220176332147, 443748696292655563600554852106219953, 1077586429185749551004887786398384111, 734256364685673565633247238808674188, 813709153852438705974687699001944662, 698040892887614638468411097229937741, 488743848233772552712671094899136791, 895665821033653622332776297456027424, 555290016518844034851789987452736624, 1084541321505780122208428159493266478, 760057504239747534707718812364698656, 1244810341469493073724795049677471844, 1049977156398512286069456057036852337, 150736590274406838082080824881743505, 1253408529425757618412079157159531177, 1025442973432791076892391053560931194, 491399393583952664550340059691775339, 813962526157548912675745153107141527, 962197947156610285147222087113588461, 831194005877237470826619099561825990, 1327593420950336710309596942095545486, 382422258963009855438448822113382400, 266071208261745353737537196658863174, 1292755069764443058499533123863946385, 803776370335635100660226348234701084, 744795379751012594656430717934890379, 1217436470644]
  }

  fn modulus_bits() -> u64 {
    4000
  }

  // 2 level karatsuba is the most performant (tested level 1,2,3)
  fn mult(a: [Field; 34], b: [Field; 34]) -> ArrayX<Field, 34, 2> {
    karatsuba_mult_34(a,b)
    //schoolbook_mult(a, b)
  }
}

#[test]
fn test_mul_4000_nonprime() {
    let stub: BigNum<34, Test4000NonPrimeParams> = BigNum::new();
    test_mul(stub);
}

// #[test]
// fn test_add_4000_nonprime() {
//     let stub: BigNum<34, Test4000NonPrimeParams> = BigNum::new();
//     test_add(stub);
// }

// #[test]
// fn test_div_4000_nonprime() {
//     let stub: BigNum<34, Test4000NonPrimeParams> = BigNum::new();
//     test_div(stub);
// }

// #[test]
// fn test_invmod_4000_nonprime() {
//     let stub: BigNum<34, Test4000NonPrimeParams> = BigNum::new();
//     test_invmod(stub);
// }

// #[test]
// fn test_assert_is_not_equal_4000_nonprime() {
//     let stub: BigNum<34, Test4000NonPrimeParams> = BigNum::new();
//     assert_is_not_equal(stub);
// }

// #[test(should_fail_with = "asssert_is_not_equal fail")]
// fn test_assert_is_not_equal_fail_4000_nonprime() {
//     let stub: BigNum<34, Test4000NonPrimeParams> = BigNum::new();
//     assert_is_not_equal_fail(stub);
// }

// #[test(should_fail_with = "asssert_is_not_equal fail")]
// fn test_assert_is_not_equal_overloaded_lhs_fail_4000_nonprime() {
//     let stub: BigNum<34, Test4000NonPrimeParams> = BigNum::new();
//     assert_is_not_equal_overloaded_lhs_fail(stub);
// }

// #[test(should_fail_with = "asssert_is_not_equal fail")]
// fn test_assert_is_not_equal_overloaded_rhs_fail_4000_nonprime() {
//     let stub: BigNum<34, Test4000NonPrimeParams> = BigNum::new();
//     assert_is_not_equal_overloaded_rhs_fail(stub);
// }

// #[test(should_fail_with = "asssert_is_not_equal fail")]
// fn test_assert_is_not_equal_overloaded_fail_4000_nonprime() {
//     let stub: BigNum<34, Test4000NonPrimeParams> = BigNum::new();
//     assert_is_not_equal_overloaded_fail(stub);
// }
