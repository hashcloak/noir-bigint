use crate::utils::arrayX::ArrayX;
use crate::BigNum;
use crate::BigNumParamsTrait;
use crate::bignum_test::{
    test_mul, test_add, test_div, test_invmod, assert_is_not_equal, assert_is_not_equal_fail,
    assert_is_not_equal_overloaded_lhs_fail, assert_is_not_equal_overloaded_rhs_fail,
    assert_is_not_equal_overloaded_fail
};
use crate::mul::schoolbook_mult;

struct Test590NonPrimeParams {}

impl BigNumParamsTrait<5> for Test590NonPrimeParams {
  // p = 2825469469519642303545908959032656788926645758850136933479568683279460320590870944506679572559483324952329815934101365367839433406001682857306051652209878970212487940398216447544
  fn modulus() -> [Field; 5] {
    [1214688717986306314229234081119697807, 1207836822223928185308763287295603850, 389588065226152383624917795120635284, 575006749943499724416164465048637819, 284927142520009986727697743301875]
  }

  fn double_modulus() -> [Field; 5] {
    [1100149440187696755554661101959051038, 1086445648662940497713719514310863125, 779176130452304767249835590241270569, 1150013499886999448832328930097275638, 569854285040019973455395486603750]
  }

  fn redc_param() -> [Field; 5] {
    [960000763038688859198424804671681804, 503116875164190408925555914736284553, 397394368122997938650697201496048089, 694522402008481205636205820835580238, 11827561613078545591473960319840539]
  }

  fn modulus_bits() -> u64 {
    590
  }

  fn mult(a: [Field; 5], b: [Field; 5]) -> ArrayX<Field, 5, 2> {
    schoolbook_mult(a,b)
  }
}
