use crate::utils::arrayX::ArrayX;
use crate::BigNum;
use crate::BigNumParamsTrait;
use crate::bignum_test::{
    test_mul, test_add, test_div, test_invmod, assert_is_not_equal, assert_is_not_equal_fail,
    assert_is_not_equal_overloaded_lhs_fail, assert_is_not_equal_overloaded_rhs_fail,
    assert_is_not_equal_overloaded_fail
};
use crate::mul::schoolbook_mult;

struct Test830NonPrimeParams {}

impl BigNumParamsTrait<7> for Test830NonPrimeParams {
  fn modulus() -> [Field; 7] {
    [1168279869308004741471899385850824248, 717609637354522971790516049017740648, 119224995026414384427301864045239302, 696422113207419229540836964315440542, 715222719135197638464248978557183970, 218979710517863977092495173732621179, 745792052520275399011233050333421]
  }

  fn double_modulus() -> [Field; 7] {
    [1007331742831093610039991711421303920, 105991278924130070677225037755136721, 238449990052828768854603728090478605, 63616230629922586177866868350536508, 101217442485479404024690896834023365, 437959421035727954184990347465242359, 1491584105040550798022466100666842]
  }

  fn redc_param() -> [Field; 7] {
    // floor(2^(2*830) / p)
   [966366706940883599875452667891052063, 819803357832790066563179386829781742, 332178492617721170985354340632931352, 1103112033184727695926192081232311787, 658847081838805450636416466641793140, 1161224469627947952572769110631684678, 2259338459028572174826788901807603]
  }

  fn modulus_bits() -> u64 {
   830 
  }

  fn mult(a: [Field; 7], b: [Field; 7]) -> ArrayX<Field, 7, 2> {
    schoolbook_mult(a, b)
  }
}
