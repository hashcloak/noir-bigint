use crate::utils::arrayX::ArrayX;
use crate::BigNum;
use crate::BigNumParamsTrait;
use crate::bignum_test::{
    test_mul, test_add, test_div, test_invmod, assert_is_not_equal, assert_is_not_equal_fail,
    assert_is_not_equal_overloaded_lhs_fail, assert_is_not_equal_overloaded_rhs_fail,
    assert_is_not_equal_overloaded_fail
};
use crate::mul::{schoolbook_mult, karatsuba_mult_8};

struct Test250NonPrimeParams {}

impl BigNumParamsTrait<8> for Test250NonPrimeParams {
  fn modulus() -> [Field; 8] {
       [817805926892792257702710333630229040, 1326055712110083373556374273527901991, 803524180783166858152940590052981050, 184580871381399409653310904595572406, 465334121543569407745778395906168971, 259960637754191713007274103134653391, 931755597769517642064760576418394579, 670932509152179748501551284008568] 
  }

  fn double_modulus() -> [Field; 8] {
    [306383858000668642501613606980113504, 1322883428435250874208941486775459407, 277820365781417843402074119825617525, 369161742762798819306621809191144813, 930668243087138815491556791812337942, 519921275508383426014548206269306782, 534283199754119411225714092556444582, 1341865018304359497003102568017137]
  }

  fn redc_param() -> [Field; 8] {
    // floor(2^(2*950) / p
    [741675871168693779447010974289392481, 429241960848444699900089548192420801, 1287200153142342193290143637343863235, 141216356635133729533194553918113783, 1146839170945359333252163242258725566, 1052603620368061344941377582235174640, 104015365704037743190974588977291711, 2511424984945433557128739672642020]
  }

  fn modulus_bits() -> u64 {
    950
  }

  fn mult(a: [Field; 8], b: [Field; 8]) -> ArrayX<Field, 8, 2> {
    karatsuba_mult_8(a, b)
  }
}
